import streamlit as st
from datetime import datetime
#from PIL import Image
#import time
#from pathlib import Path
from services.blob_service import upload_to_blob
from services.credit_card_service import detect_credit_card_info
from services.data_base import DataBase
import pandas as pd

class StreamlitInterface:
    """Classe principal para interface Streamlit."""
    
    def __init__(self):
        """Inicializa a interface com configura√ß√µes b√°sicas."""
        st.set_page_config(
            page_title="Credit Card Analyzer",
            #page_title_icon="üí≥",
            layout="wide",
            initial_sidebar_state="expanded"
            )
        self.db = DataBase()
        self._setup_session_state()
        self._apply_custom_css()
        
        
    def _setup_session_state(self):
        """Inicializa vari√°veis de estado da sess√£o."""
        if 'page' not in st.session_state:
            st.session_state.page = 'In√≠cio'
            
    def _apply_custom_css(self):
        """Aplica estilos CSS customizados."""
        st.markdown("""
            <style>
                .main {
                    padding: 2rem;
                }
                .stButton>button {
                    width: 100%;
                }
                .social-links {
                    display: flex;
                    justify-content: center;
                    gap: 1rem;
                    margin: 1rem 0;
                }
                .card-valid {
                    padding: 1rem;
                    border-radius: 0.5rem;
                    background-color: #c8e6c9;
                    color: #2e7d32;
                }
                .card-invalid {
                    padding: 1rem;
                    border-radius: 0.5rem;
                    background-color: #ffcdd2;
                    color: #c62828;
                }
            </style>
        """, unsafe_allow_html=True)
        
    def show_header(self):
        """Exibe o cabe√ßalho com navega√ß√£o e informa√ß√µes do desenvolvedor."""
        st.sidebar.title("üè¶ Credit Card Analyzer")
        
        # Menu de navega√ß√£o
        menu_options = {
            "In√≠cio": "üè†",
            "An√°lise de Cart√£o": "üí≥",
            "Consulta Banco de Dados": "üîç",
            "Documenta√ß√£o": "üìö",
            "Sobre": "‚ÑπÔ∏è"
        }
        
        selected = st.sidebar.radio(
            "Navega√ß√£o",
            list(menu_options.keys()),
            format_func=lambda x: f"{menu_options[x]} {x}"
        )
        
        # Informa√ß√µes do desenvolvedor
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üë®‚Äçüíª Desenvolvedor")
        st.sidebar.markdown("**Julio Okuda**")
        
        # Links sociais
        st.sidebar.markdown("""
            <div class="social-links">
                <a href="https://github.com/Jcnok" target="_blank">
                    <img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white" />
                </a>
                <a href="https://linkedin.com/in/juliookuda" target="_blank">
                    <img src="https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white" />
                </a>
            </div>
        """, unsafe_allow_html=True)
        
        return selected
        
    def home_page(self):
        """P√°gina inicial."""
        st.title("üè¶ Credit Card Analyzer")
        
        st.markdown("""
        ### üåü Simplificando a Valida√ß√£o de Cart√µes no E-commerce
        
        J√° parou para pensar como algumas plataformas de e-commerce utilizam tecnologias 
        avan√ßadas para facilitar compras e prevenir fraudes? Lembra daquele momento m√°gico 
        em que, ao finalizar uma compra, em vez de digitar todos os dados do cart√£o, voc√™ 
        pode simplesmente enviar uma foto?
        
        #### üí° Nossa Proposta
        Este projeto demonstra exatamente como essa m√°gica acontece! Utilizando a 
        Intelig√™ncia Artificial da Azure, implementamos um sistema de valida√ß√£o 
        de cart√µes que torna esse processo n√£o s√≥ poss√≠vel, mas tamb√©m extremamente 
        simples.
        
        #### üöÄ Como Funciona
        1. Fa√ßa upload da imagem do cart√£o
        2. A IA analisa os dados instantaneamente
        3. Receba a valida√ß√£o em segundos
        4. Dados s√£o armazenados para an√°lises futuras
        
        #### üéØ Benef√≠cios
        - Detec√ß√£o autom√°tica das informa√ß√µes sem digita√ß√£o
        - Interface intuitiva e amig√°vel
        - Armazenamento para an√°lises futuras
        - Consultas facilitadas com exporta√ß√£o para CSV
        
        #### üîç Explorando o Projeto
        Este √© um projeto demonstrativo que utiliza tecnologias de ponta da Azure 
        para mostrar como implementar valida√ß√£o de cart√µes de forma eficiente. 
        Embora seja uma POC (Prova de Conceito), j√° inclui os principais elementos 
        necess√°rios para um sistema completo:
        
        - Extra√ß√£o precisa de dados do cart√£o
        - Valida√ß√£o em tempo real
        - Armazenamento estruturado
        - Interface para an√°lise de dados
        
        #### üéØ Objetivo
        Demonstrar na pr√°tica como as tecnologias modernas podem ser aplicadas 
        para criar solu√ß√µes que melhoram significativamente a experi√™ncia do 
        usu√°rio em transa√ß√µes financeiras.
        """)
        
    def analyze_card_page(self):
        """P√°gina de an√°lise de cart√µes."""
        st.title("üí≥ An√°lise de Cart√£o de Cr√©dito")
        
        uploaded_file = st.file_uploader("Escolha uma imagem do cart√£o", type=['png', 'jpg', 'jpeg'])
        
        if uploaded_file:
            # Exibe imagem carregada
            st.image(uploaded_file, caption="Imagem do Cart√£o", use_column_width=True)
            
            if st.button("Analisar Cart√£o"):
                with st.spinner("Processando..."):
                    # Upload para Blob Storage
                    file_name = f"card_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{uploaded_file.name.split('.')[-1]}"
                    blob_url = upload_to_blob(uploaded_file.getvalue(), file_name)
                    
                    if blob_url:
                        # Detecta informa√ß√µes do cart√£o
                        card_info = detect_credit_card_info(blob_url)
                        
                        if card_info:
                            # Valida√ß√£o simplificada (pode ser expandida)
                            is_valid = bool(card_info.get('card_number'))
                            
                            # Prepara dados para o banco
                            card_data = {
                                **card_info,
                                'is_valid': 'valid' if is_valid else 'invalid',
                                'processed_at': datetime.now().isoformat()
                            }
                            
                            # Insere no banco
                            self.db.insert_card(card_data)
                            
                            # Exibe resultados
                            st.markdown(
                                f"<div class='card-{'valid' if is_valid else 'invalid'}'>"
                                f"Status: {'‚úÖ Cart√£o V√°lido' if is_valid else '‚ùå Cart√£o Inv√°lido'}"
                                "</div>",
                                unsafe_allow_html=True
                            )
                            
                            st.json(card_info)
                    else:
                        st.error("Erro ao processar o arquivo.")
                        
    def query_database_page(self):
        """P√°gina de consulta ao banco de dados."""
        st.title("üîç Consulta ao Banco de Dados")
        
        # Op√ß√µes de filtro
        filter_options = st.multiselect(
            "Selecione os filtros:",
            ["Banco", "Validade", "Data de Processamento"]
        )
        
        # Query base
        query = "SELECT * FROM credit_cards"
        where_clauses = []
        
        # Aplica√ß√£o dos filtros
        if "Banco" in filter_options:
            bank = st.text_input("Nome do Banco:")
            if bank:
                where_clauses.append(f"bank_name LIKE '%{bank}%'")
                
        if "Validade" in filter_options:
            valid_status = st.selectbox("Status:", ["Todos", "Valid", "Invalid"])
            if valid_status != "Todos":
                where_clauses.append(f"is_valid = '{valid_status.lower()}'")
                
        if "Data de Processamento" in filter_options:
            date_range = st.date_input("Per√≠odo:", [])
            if len(date_range) == 2:
                where_clauses.append(
                    f"processed_at BETWEEN '{date_range[0]}' AND '{date_range[1]}'"
                )
                
        # Constru√ß√£o da query final
        if where_clauses:
            query += " WHERE " + " AND ".join(where_clauses)
            
        # Executa a query e exibe resultados
        try:
            results = self.db.execute_custom_query(query)
            if results:
                df = pd.DataFrame(results)
                st.dataframe(df)
                
                # Export options
                if st.button("Exportar CSV"):
                    csv = df.to_csv(index=False)
                    st.download_button(
                        "Download CSV",
                        csv,
                        "card_data.csv",
                        "text/csv"
                    )
            else:
                st.info("Nenhum resultado encontrado.")
        except Exception as e:
            st.error(f"Erro na consulta: {e}")
            
    def documentation_page(self):
        """P√°gina de documenta√ß√£o."""
        st.title("üìö Documenta√ß√£o")
        
        st.markdown("""
        ### üìñ Como Usar o Sistema
        
        #### 1. An√°lise de Cart√£o
        1. Acesse a p√°gina "An√°lise de Cart√£o"
        2. Fa√ßa upload da imagem do cart√£o
        3. Clique em "Analisar Cart√£o"
        4. Aguarde o processamento
        5. Visualize os resultados
        
        #### 2. Consulta ao Banco de Dados
        1. Acesse a p√°gina "Consulta Banco de Dados"
        2. Selecione os filtros desejados
        3. Configure os par√¢metros
        4. Visualize os resultados
        5. Exporte os dados se necess√°rio
        
        #### üîß Tecnologias Utilizadas
        - Python 3.12+
        - Streamlit
        - Azure Document Intelligence
        - Azure Blob Storage
        - SQLite
        
        #### üìã Requisitos T√©cnicos
        - Conex√£o com Internet
        - Navegador 
        - Imagens em formato PNG, JPG ou JPEG
        """)
        
    def about_page(self):
        """P√°gina sobre o projeto."""
        st.title("‚ÑπÔ∏è Sobre")
        
        st.markdown("""
        ### üéØ Projeto Credit Card Analyzer
        
        Este projeto √© uma Prova de Conceito (POC) desenvolvida como parte do 
        Bootcamp Microsoft Certification Challenge #1 - AI 102. O objetivo √© demonstrar a aplica√ß√£o 
        pr√°tica de conceitos modernos de desenvolvimento e integra√ß√£o com 
        servi√ßos em nuvem da Azure.
        
        #### üõ†Ô∏è Tecnologias Utilizadas
        - **Frontend**: Streamlit
        - **Backend**: Python
        - **Cloud**: Azure Services
        - **Database**: SQLite
        - **Version Control**: Git
        
        #### üåü Caracter√≠sticas
        - Interface intuitiva
        - Processamento de imagem e valida√ß√£o
        - Armazenamento em banco de dados
        - An√°lise e exporta√ß√£o de dados
        - Integra√ß√£o com servi√ßos Azure (Document Intelligence e Blob Storage)
        
        #### üë®‚Äçüíª Desenvolvimento
        Desenvolvido por **Julio Okuda** como parte do projeto final do bootcamp,
        demonstrando a aplica√ß√£o pr√°tica dos conceitos aprendidos durante o bootcamp.
                            
        #### üìù Nota
        Este √© um projeto educacional e demonstrativo, n√£o devendo ser utilizado
        em ambiente de produ√ß√£o sem as devidas adapta√ß√µes e medidas de seguran√ßa.
        """)
        
    def run(self):
        """Executa a aplica√ß√£o."""
        selected_page = self.show_header()
        
        # Roteamento de p√°ginas
        if selected_page == "In√≠cio":
            self.home_page()
        elif selected_page == "An√°lise de Cart√£o":
            self.analyze_card_page()
        elif selected_page == "Consulta Banco de Dados":
            self.query_database_page()
        elif selected_page == "Documenta√ß√£o":
            self.documentation_page()
        elif selected_page == "Sobre":
            self.about_page()

if __name__ == "__main__":
    app = StreamlitInterface()
    app.run()