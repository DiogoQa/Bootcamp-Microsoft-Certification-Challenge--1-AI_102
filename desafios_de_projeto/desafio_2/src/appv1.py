import datetime

import pandas as pd
import streamlit as st
from services.blob_service import BlobStorageService
from services.credit_card_service import CreditCardValidator
from services.data_base import DatabaseService

# Inicializa os servi√ßos
credit_card_validator = CreditCardValidator()
blob_storage_service = BlobStorageService()
database_service = DatabaseService()

# Menu de navega√ß√£o
menu_options = {
    "In√≠cio": "üè†",
    "An√°lise de Cart√£o": "üí≥",
    "Consulta Banco de Dados": "üîç",
    "Documenta√ß√£o": "üìö",
    "Sobre": "‚ÑπÔ∏è",
}


# Sidebar com o menu
selected_page = st.sidebar.radio(
    "Menu", list(menu_options.keys()), format_func=lambda x: f"{x} {menu_options[x]}"
)

# Informa√ß√µes do desenvolvedor
st.sidebar.markdown("---")
st.sidebar.markdown("### üë®‚Äçüíª Desenvolvedor")
st.sidebar.markdown("**Julio Okuda**")

# Links sociais
st.sidebar.markdown(
    """
    <div class="social-links">
        <a href="https://github.com/Jcnok" target="_blank">
            <img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white" />
        </a>
        <a href="https://linkedin.com/in/juliookuda" target="_blank">
            <img src="https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white" />
        </a>
    </div>
""",
    unsafe_allow_html=True,
)


# P√°ginas
if selected_page == "In√≠cio":
    st.title("üåü Simplificando a Valida√ß√£o de Cart√µes no E-commerce")
    st.markdown(
        """
        J√° parou para pensar como algumas plataformas de e-commerce utilizam tecnologias
        avan√ßadas para facilitar compras e prevenir fraudes? Lembra daquele momento m√°gico
        em que, ao finalizar uma compra, em vez de digitar todos os dados do cart√£o, voc√™
        pode simplesmente enviar uma foto?
        #### üí° Nossa Proposta
        Este projeto demonstra exatamente como essa m√°gica acontece! Utilizando a
        Intelig√™ncia Artificial da Azure, implementamos um sistema de valida√ß√£o
        de cart√µes que torna esse processo n√£o s√≥ poss√≠vel, mas tamb√©m extremamente
        simples.
        #### üöÄ Como Funciona
        1. Fa√ßa upload da imagem do cart√£o
        2. A IA analisa os dados instantaneamente
        3. Receba a valida√ß√£o em segundos
        4. Dados s√£o armazenados para an√°lises futuras
        #### üéØ Benef√≠cios
        - Detec√ß√£o autom√°tica das informa√ß√µes sem digita√ß√£o
        - Interface intuitiva e amig√°vel
        - Armazenamento para an√°lises futuras
        - Consultas facilitadas com exporta√ß√£o para CSV
        #### üîç Explorando o Projeto
        Este √© um projeto demonstrativo que utiliza tecnologias de ponta da Azure
        para mostrar como implementar valida√ß√£o de cart√µes de forma eficiente.
        Embora seja uma POC (Prova de Conceito), j√° inclui os principais elementos
        necess√°rios para um sistema completo:
        - Extra√ß√£o precisa de dados do cart√£o
        - Valida√ß√£o em tempo real
        - Armazenamento estruturado
        - Interface para an√°lise de dados
        #### üéØ Objetivo
        Demonstrar na pr√°tica como as tecnologias modernas podem ser aplicadas
        para criar solu√ß√µes que melhoram significativamente a experi√™ncia do
        usu√°rio em transa√ß√µes financeiras.
        """
    )

elif selected_page == "An√°lise de Cart√£o":
    st.title("üí≥ An√°lise de Cart√£o")
    uploaded_file = st.file_uploader(
        "Carregue a imagem do cart√£o", type=["jpg", "jpeg", "png"]
    )

    if uploaded_file:
        # Exibe imagem carregada
        st.image(uploaded_file, caption="Imagem do Cart√£o", use_column_width=True)
        if st.button("üí≥Analisar Cart√£o"):
            with st.spinner("Processando..."):
                # Upload para Blob Storage
                file_name = uploaded_file.name
                file = uploaded_file.getvalue()
                blob_url = blob_storage_service.upload_blob(file, file_name)
            if blob_url:
                # Detecta informa√ß√µes do cart√£o
                card_info = credit_card_validator.detect_credit_card_info_from_url(
                    blob_url
                )
                if card_info:
                    # Valida√ß√£o simplificada
                    st.write("Informa√ß√µes do Cart√£o:")
                    st.write(card_info)
                    validation_result = credit_card_validator.validate_card_info(
                        card_info
                    )
                    if validation_result["is_valid"]:
                        st.success("‚úÖ Cart√£o V√°lido")
                        existing_card = database_service.get_card_by_number(
                            card_info["card_number"]
                        )
                        if existing_card:
                            st.info(
                                f"Cart√£o j√° existe no banco de dados. ID: {existing_card['id']}"
                            )
                        else:
                            card_info["is_valid"] = validation_result[
                                "is_valid"
                            ]  # Converter para string para o banco de dados
                            card_info["processed_at"] = (
                                datetime.datetime.now().isoformat()
                            )
                            database_service.insert_card(card_info)
                            st.success("Cart√£o inserido no banco de dados!")
                    else:
                        st.error("‚ùå Cart√£o Inv√°lido")
                        st.error("N√£o foi poss√≠vel analisar o cart√£o.")
            else:
                st.error("Erro ao carregar imagem para o Blob Storage.")

elif selected_page == "Consulta Banco de Dados":
    st.title("üîç Consulta Banco de Dados")
    query = st.text_input("Insira a query SQL (apenas SELECT):")

    if st.button("Executar Query"):
        try:
            results = database_service.execute_custom_query(query)
            if results:
                df = pd.DataFrame(results)
                st.dataframe(df)
                csv = df.to_csv(index=False)
                st.download_button(
                    "Download CSV", csv, file_name="credit_cards.csv", mime="text/csv"
                )
            else:
                st.info("Nenhum resultado encontrado.")
        except ValueError as e:
            st.error(e)
        except Exception as e:
            st.error(f"Ocorreu um erro: {e}")

elif selected_page == "Documenta√ß√£o":
    st.title("üìö Documenta√ß√£o")
    st.markdown(
        """
    # Documenta√ß√£o do Credit Card Analyzer

    ## Vis√£o Geral

    Este aplicativo utiliza a API do Azure Document Intelligence para extrair informa√ß√µes de cart√µes de cr√©dito a partir de imagens.  Os dados extra√≠dos s√£o ent√£o validados e persistidos em um banco de dados SQLite.

    ##  Funcionalidades Principais

    * **Upload de Imagem:** Permite ao usu√°rio carregar uma imagem de um cart√£o de cr√©dito.
    * **An√°lise de Imagem:** Usa a API do Azure Document Intelligence para detectar e extrair informa√ß√µes como n√∫mero do cart√£o, data de validade, nome do titular e nome do banco.
    * **Valida√ß√£o de Cart√£o:** Realiza uma valida√ß√£o b√°sica do n√∫mero e data de validade do cart√£o.
    * **Armazenamento de Dados:** Armazena as informa√ß√µes do cart√£o (incluindo o resultado da valida√ß√£o) em um banco de dados SQLite.
    * **Consulta de Dados:** Permite consultar os dados armazenados no banco de dados utilizando consultas SQL.
    * **Exporta√ß√£o de Dados:** Permite exportar os resultados das consultas para um arquivo CSV.

    ##  Arquitetura

    O aplicativo segue uma arquitetura de tr√™s camadas:

    1. **Frontend (Streamlit):** Interface do usu√°rio para intera√ß√£o com o usu√°rio.
    2. **Backend (Python):** L√≥gica de neg√≥cio, incluindo a intera√ß√£o com os servi√ßos da Azure e o banco de dados.
    3. **Azure Services:** Azure Document Intelligence e Azure Blob Storage.

    ##  Tecnologias Utilizadas

    * **Streamlit:** Framework Python para criar aplica√ß√µes web.
    * **Python:** Linguagem de programa√ß√£o.
    * **Azure Document Intelligence:** Servi√ßo da Azure para extra√ß√£o de informa√ß√µes de documentos.
    * **Azure Blob Storage:** Servi√ßo da Azure para armazenamento de objetos de dados bin√°rios.
    * **SQLite:** Sistema de gerenciamento de banco de dados relacional.
    """
    )

elif selected_page == "Sobre":
    st.title("‚ÑπÔ∏è Sobre")
    st.markdown(
        """
    ### üéØ Projeto Credit Card Analyzer

    Este projeto √© uma Prova de Conceito (POC) desenvolvida como parte do
    [Bootcamp Microsoft Certification Challenge #1 - AI 102](https://www.dio.me/bootcamp/microsoft-ai-102). O objetivo √© demonstrar a aplica√ß√£o
    pr√°tica de conceitos modernos de desenvolvimento e integra√ß√£o com
    servi√ßos em nuvem da Azure.

    #### üõ†Ô∏è Tecnologias Utilizadas
    - **Frontend**: Streamlit
    - **Backend**: Python
    - **Cloud**: Azure Services
    - **Database**: SQLite
    - **Version Control**: Git

    #### üåü Caracter√≠sticas
    - Interface intuitiva
    - Processamento de imagem e valida√ß√£o
    - Armazenamento em banco de dados
    - An√°lise e exporta√ß√£o de dados
    - Integra√ß√£o com servi√ßos Azure (Document Intelligence e Blob Storage)

    #### üë®‚Äçüíª Desenvolvimento
    Desenvolvido por **Julio Okuda** como parte do projeto final do bootcamp,
    demonstrando a aplica√ß√£o pr√°tica dos conceitos aprendidos durante o bootcamp.

    #### üìù Nota
    Este √© um projeto educacional e demonstrativo, n√£o devendo ser utilizado
    em ambiente de produ√ß√£o sem as devidas adapta√ß√µes e medidas de seguran√ßa.
    """
    )
